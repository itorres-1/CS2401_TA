
Student: Tinevra
Lab: 6

************************* Good Input *************************


_________________________ "- 3 ^ 2 2" _________________________

Correct: -1.0
LStack: -1.0
AStack: -1.0
Correctness = 33.333333333333336

________________________ "/ + 1 10 2" ________________________

Correct: 5.5
LStack: 5.5
AStack: 5.5
Correctness = 66.66666666666667

________________ "* / ^ - + 2 3 10 2 250 100" ________________

Correct: 10.0
LStack: null
AStack: null
Correctness = 66.66666666666667

************************** Bad Input **************************


_____________________________ "" _____________________________

Correct: null
LStack: null
AStack: null
Robustness = 16.666666666666668

__________________________ "+ 1 1 1" __________________________

Correct: null
LStack: 2.0
AStack: 2.0
Robustness = 16.666666666666668

____________________________ "/ 1" ____________________________

Correct: null
LStack: null
AStack: null
Robustness = 33.333333333333336

___________________________ "+ 1 A" ___________________________

Correct: null
LStack: null
AStack: null
Robustness = 50.00000000000001

___________________________ "1 1 1" ___________________________

Correct: null
LStack: 1.0
AStack: 1.0
Robustness = 50.00000000000001

___________________________ "/ 1 0" ___________________________

Correct: null
LStack: Infinity
AStack: Infinity
Robustness = 50.00000000000001

$$$$$$$$$$$$$$$$$$$$$$$$$ Total Grade $$$$$$$$$$$$$$$$$$$$$$$$$

Correctness: 66.66666666666667
Robustness: 50.00000000000001

-10 points style, name it LLStack, not linkedList. LL is a different data structure.
Also, ALL classes start with a capital letter by CONVENTION.ex: stack should be Stack

For our purposes, we know our stack will contain at most as many elements as returned by Str.split(" ").
No need to waste so much memory by allocating a stack of size 10000. Create a custom constructor.

Lab Grade: 83
